// coverage:ignore-file
// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ncnn - NCNN bindings for Dart language
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/10/30

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/ncnn/c_api.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class NcnnNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NcnnNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NcnnNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ncnn_allocator_t ncnn_allocator_create_pool_allocator() {
    return _ncnn_allocator_create_pool_allocator();
  }

  late final _ncnn_allocator_create_pool_allocatorPtr =
      _lookup<ffi.NativeFunction<ncnn_allocator_t Function()>>(
          'ncnn_allocator_create_pool_allocator');
  late final _ncnn_allocator_create_pool_allocator =
      _ncnn_allocator_create_pool_allocatorPtr
          .asFunction<ncnn_allocator_t Function()>();

  ncnn_allocator_t ncnn_allocator_create_unlocked_pool_allocator() {
    return _ncnn_allocator_create_unlocked_pool_allocator();
  }

  late final _ncnn_allocator_create_unlocked_pool_allocatorPtr =
      _lookup<ffi.NativeFunction<ncnn_allocator_t Function()>>(
          'ncnn_allocator_create_unlocked_pool_allocator');
  late final _ncnn_allocator_create_unlocked_pool_allocator =
      _ncnn_allocator_create_unlocked_pool_allocatorPtr
          .asFunction<ncnn_allocator_t Function()>();

  void ncnn_allocator_destroy(
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_allocator_destroy(
      allocator,
    );
  }

  late final _ncnn_allocator_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_allocator_t)>>(
          'ncnn_allocator_destroy');
  late final _ncnn_allocator_destroy =
      _ncnn_allocator_destroyPtr.asFunction<void Function(ncnn_allocator_t)>();

  void ncnn_blob_get_bottom_shape(
    ncnn_layer_t layer,
    int i,
    ffi.Pointer<ffi.Int> dims,
    ffi.Pointer<ffi.Int> w,
    ffi.Pointer<ffi.Int> h,
    ffi.Pointer<ffi.Int> c,
  ) {
    return _ncnn_blob_get_bottom_shape(
      layer,
      i,
      dims,
      w,
      h,
      c,
    );
  }

  late final _ncnn_blob_get_bottom_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ncnn_layer_t,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ncnn_blob_get_bottom_shape');
  late final _ncnn_blob_get_bottom_shape =
      _ncnn_blob_get_bottom_shapePtr.asFunction<
          void Function(
              ncnn_layer_t,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int ncnn_blob_get_consumer(
    ncnn_blob_t blob,
  ) {
    return _ncnn_blob_get_consumer(
      blob,
    );
  }

  late final _ncnn_blob_get_consumerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_blob_t)>>(
          'ncnn_blob_get_consumer');
  late final _ncnn_blob_get_consumer =
      _ncnn_blob_get_consumerPtr.asFunction<int Function(ncnn_blob_t)>();

  ffi.Pointer<ffi.Char> ncnn_blob_get_name(
    ncnn_blob_t blob,
  ) {
    return _ncnn_blob_get_name(
      blob,
    );
  }

  late final _ncnn_blob_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ncnn_blob_t)>>(
          'ncnn_blob_get_name');
  late final _ncnn_blob_get_name = _ncnn_blob_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ncnn_blob_t)>();

  int ncnn_blob_get_producer(
    ncnn_blob_t blob,
  ) {
    return _ncnn_blob_get_producer(
      blob,
    );
  }

  late final _ncnn_blob_get_producerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_blob_t)>>(
          'ncnn_blob_get_producer');
  late final _ncnn_blob_get_producer =
      _ncnn_blob_get_producerPtr.asFunction<int Function(ncnn_blob_t)>();

  void ncnn_blob_get_shape(
    ncnn_blob_t blob,
    ffi.Pointer<ffi.Int> dims,
    ffi.Pointer<ffi.Int> w,
    ffi.Pointer<ffi.Int> h,
    ffi.Pointer<ffi.Int> c,
  ) {
    return _ncnn_blob_get_shape(
      blob,
      dims,
      w,
      h,
      c,
    );
  }

  late final _ncnn_blob_get_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ncnn_blob_t,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ncnn_blob_get_shape');
  late final _ncnn_blob_get_shape = _ncnn_blob_get_shapePtr.asFunction<
      void Function(ncnn_blob_t, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void ncnn_blob_get_top_shape(
    ncnn_layer_t layer,
    int i,
    ffi.Pointer<ffi.Int> dims,
    ffi.Pointer<ffi.Int> w,
    ffi.Pointer<ffi.Int> h,
    ffi.Pointer<ffi.Int> c,
  ) {
    return _ncnn_blob_get_top_shape(
      layer,
      i,
      dims,
      w,
      h,
      c,
    );
  }

  late final _ncnn_blob_get_top_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ncnn_layer_t,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ncnn_blob_get_top_shape');
  late final _ncnn_blob_get_top_shape = _ncnn_blob_get_top_shapePtr.asFunction<
      void Function(ncnn_layer_t, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void ncnn_convert_packing(
    ncnn_mat_t src,
    ffi.Pointer<ncnn_mat_t> dst,
    int elempack,
    ncnn_option_t opt,
  ) {
    return _ncnn_convert_packing(
      src,
      dst,
      elempack,
      opt,
    );
  }

  late final _ncnn_convert_packingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ncnn_mat_t, ffi.Pointer<ncnn_mat_t>, ffi.Int,
              ncnn_option_t)>>('ncnn_convert_packing');
  late final _ncnn_convert_packing = _ncnn_convert_packingPtr.asFunction<
      void Function(ncnn_mat_t, ffi.Pointer<ncnn_mat_t>, int, ncnn_option_t)>();

  void ncnn_copy_cut_border(
    ncnn_mat_t src,
    ncnn_mat_t dst,
    int top,
    int bottom,
    int left,
    int right,
    ncnn_option_t opt,
  ) {
    return _ncnn_copy_cut_border(
      src,
      dst,
      top,
      bottom,
      left,
      right,
      opt,
    );
  }

  late final _ncnn_copy_cut_borderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ncnn_mat_t, ncnn_mat_t, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ncnn_option_t)>>('ncnn_copy_cut_border');
  late final _ncnn_copy_cut_border = _ncnn_copy_cut_borderPtr.asFunction<
      void Function(
          ncnn_mat_t, ncnn_mat_t, int, int, int, int, ncnn_option_t)>();

  void ncnn_copy_cut_border_3d(
    ncnn_mat_t src,
    ncnn_mat_t dst,
    int top,
    int bottom,
    int left,
    int right,
    int front,
    int behind,
    ncnn_option_t opt,
  ) {
    return _ncnn_copy_cut_border_3d(
      src,
      dst,
      top,
      bottom,
      left,
      right,
      front,
      behind,
      opt,
    );
  }

  late final _ncnn_copy_cut_border_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ncnn_mat_t,
              ncnn_mat_t,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ncnn_option_t)>>('ncnn_copy_cut_border_3d');
  late final _ncnn_copy_cut_border_3d = _ncnn_copy_cut_border_3dPtr.asFunction<
      void Function(ncnn_mat_t, ncnn_mat_t, int, int, int, int, int, int,
          ncnn_option_t)>();

  void ncnn_copy_make_border(
    ncnn_mat_t src,
    ncnn_mat_t dst,
    int top,
    int bottom,
    int left,
    int right,
    int type,
    double v,
    ncnn_option_t opt,
  ) {
    return _ncnn_copy_make_border(
      src,
      dst,
      top,
      bottom,
      left,
      right,
      type,
      v,
      opt,
    );
  }

  late final _ncnn_copy_make_borderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ncnn_mat_t,
              ncnn_mat_t,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ncnn_option_t)>>('ncnn_copy_make_border');
  late final _ncnn_copy_make_border = _ncnn_copy_make_borderPtr.asFunction<
      void Function(ncnn_mat_t, ncnn_mat_t, int, int, int, int, int, double,
          ncnn_option_t)>();

  void ncnn_copy_make_border_3d(
    ncnn_mat_t src,
    ncnn_mat_t dst,
    int top,
    int bottom,
    int left,
    int right,
    int front,
    int behind,
    int type,
    double v,
    ncnn_option_t opt,
  ) {
    return _ncnn_copy_make_border_3d(
      src,
      dst,
      top,
      bottom,
      left,
      right,
      front,
      behind,
      type,
      v,
      opt,
    );
  }

  late final _ncnn_copy_make_border_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ncnn_mat_t,
              ncnn_mat_t,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ncnn_option_t)>>('ncnn_copy_make_border_3d');
  late final _ncnn_copy_make_border_3d =
      _ncnn_copy_make_border_3dPtr.asFunction<
          void Function(ncnn_mat_t, ncnn_mat_t, int, int, int, int, int, int,
              int, double, ncnn_option_t)>();

  ncnn_datareader_t ncnn_datareader_create() {
    return _ncnn_datareader_create();
  }

  late final _ncnn_datareader_createPtr =
      _lookup<ffi.NativeFunction<ncnn_datareader_t Function()>>(
          'ncnn_datareader_create');
  late final _ncnn_datareader_create =
      _ncnn_datareader_createPtr.asFunction<ncnn_datareader_t Function()>();

  ncnn_datareader_t ncnn_datareader_create_from_memory(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> mem,
  ) {
    return _ncnn_datareader_create_from_memory(
      mem,
    );
  }

  late final _ncnn_datareader_create_from_memoryPtr = _lookup<
          ffi.NativeFunction<
              ncnn_datareader_t Function(
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'ncnn_datareader_create_from_memory');
  late final _ncnn_datareader_create_from_memory =
      _ncnn_datareader_create_from_memoryPtr.asFunction<
          ncnn_datareader_t Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ncnn_datareader_t ncnn_datareader_create_from_stdio(
    ffi.Pointer<FILE> fp,
  ) {
    return _ncnn_datareader_create_from_stdio(
      fp,
    );
  }

  late final _ncnn_datareader_create_from_stdioPtr = _lookup<
          ffi.NativeFunction<ncnn_datareader_t Function(ffi.Pointer<FILE>)>>(
      'ncnn_datareader_create_from_stdio');
  late final _ncnn_datareader_create_from_stdio =
      _ncnn_datareader_create_from_stdioPtr
          .asFunction<ncnn_datareader_t Function(ffi.Pointer<FILE>)>();

  void ncnn_datareader_destroy(
    ncnn_datareader_t dr,
  ) {
    return _ncnn_datareader_destroy(
      dr,
    );
  }

  late final _ncnn_datareader_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_datareader_t)>>(
          'ncnn_datareader_destroy');
  late final _ncnn_datareader_destroy = _ncnn_datareader_destroyPtr
      .asFunction<void Function(ncnn_datareader_t)>();

  void ncnn_draw_circle_c1(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int cx,
    int cy,
    int radius,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_circle_c1(
      pixels,
      w,
      h,
      cx,
      cy,
      radius,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_circle_c1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_circle_c1');
  late final _ncnn_draw_circle_c1 = _ncnn_draw_circle_c1Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int, int)>();

  void ncnn_draw_circle_c2(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int cx,
    int cy,
    int radius,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_circle_c2(
      pixels,
      w,
      h,
      cx,
      cy,
      radius,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_circle_c2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_circle_c2');
  late final _ncnn_draw_circle_c2 = _ncnn_draw_circle_c2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int, int)>();

  void ncnn_draw_circle_c3(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int cx,
    int cy,
    int radius,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_circle_c3(
      pixels,
      w,
      h,
      cx,
      cy,
      radius,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_circle_c3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_circle_c3');
  late final _ncnn_draw_circle_c3 = _ncnn_draw_circle_c3Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int, int)>();

  void ncnn_draw_circle_c4(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int cx,
    int cy,
    int radius,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_circle_c4(
      pixels,
      w,
      h,
      cx,
      cy,
      radius,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_circle_c4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_circle_c4');
  late final _ncnn_draw_circle_c4 = _ncnn_draw_circle_c4Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int, int)>();

  void ncnn_draw_line_c1(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int x0,
    int y0,
    int x1,
    int y1,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_line_c1(
      pixels,
      w,
      h,
      x0,
      y0,
      x1,
      y1,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_line_c1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_line_c1');
  late final _ncnn_draw_line_c1 = _ncnn_draw_line_c1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int,
          int, int)>();

  void ncnn_draw_line_c2(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int x0,
    int y0,
    int x1,
    int y1,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_line_c2(
      pixels,
      w,
      h,
      x0,
      y0,
      x1,
      y1,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_line_c2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_line_c2');
  late final _ncnn_draw_line_c2 = _ncnn_draw_line_c2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int,
          int, int)>();

  void ncnn_draw_line_c3(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int x0,
    int y0,
    int x1,
    int y1,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_line_c3(
      pixels,
      w,
      h,
      x0,
      y0,
      x1,
      y1,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_line_c3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_line_c3');
  late final _ncnn_draw_line_c3 = _ncnn_draw_line_c3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int,
          int, int)>();

  void ncnn_draw_line_c4(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int x0,
    int y0,
    int x1,
    int y1,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_line_c4(
      pixels,
      w,
      h,
      x0,
      y0,
      x1,
      y1,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_line_c4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_line_c4');
  late final _ncnn_draw_line_c4 = _ncnn_draw_line_c4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int,
          int, int)>();

  /// mat pixel drawing api
  void ncnn_draw_rectangle_c1(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int rx,
    int ry,
    int rw,
    int rh,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_rectangle_c1(
      pixels,
      w,
      h,
      rx,
      ry,
      rw,
      rh,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_rectangle_c1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_rectangle_c1');
  late final _ncnn_draw_rectangle_c1 = _ncnn_draw_rectangle_c1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int,
          int, int)>();

  void ncnn_draw_rectangle_c2(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int rx,
    int ry,
    int rw,
    int rh,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_rectangle_c2(
      pixels,
      w,
      h,
      rx,
      ry,
      rw,
      rh,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_rectangle_c2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_rectangle_c2');
  late final _ncnn_draw_rectangle_c2 = _ncnn_draw_rectangle_c2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int,
          int, int)>();

  void ncnn_draw_rectangle_c3(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int rx,
    int ry,
    int rw,
    int rh,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_rectangle_c3(
      pixels,
      w,
      h,
      rx,
      ry,
      rw,
      rh,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_rectangle_c3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_rectangle_c3');
  late final _ncnn_draw_rectangle_c3 = _ncnn_draw_rectangle_c3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int,
          int, int)>();

  void ncnn_draw_rectangle_c4(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    int rx,
    int ry,
    int rw,
    int rh,
    int color,
    int thickness,
  ) {
    return _ncnn_draw_rectangle_c4(
      pixels,
      w,
      h,
      rx,
      ry,
      rw,
      rh,
      color,
      thickness,
    );
  }

  late final _ncnn_draw_rectangle_c4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int)>>('ncnn_draw_rectangle_c4');
  late final _ncnn_draw_rectangle_c4 = _ncnn_draw_rectangle_c4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int,
          int, int)>();

  void ncnn_draw_text_c1(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    ffi.Pointer<ffi.Char> text,
    int x,
    int y,
    int fontpixelsize,
    int color,
  ) {
    return _ncnn_draw_text_c1(
      pixels,
      w,
      h,
      text,
      x,
      y,
      fontpixelsize,
      color,
    );
  }

  late final _ncnn_draw_text_c1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt)>>('ncnn_draw_text_c1');
  late final _ncnn_draw_text_c1 = _ncnn_draw_text_c1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.Char>, int, int, int, int)>();

  void ncnn_draw_text_c2(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    ffi.Pointer<ffi.Char> text,
    int x,
    int y,
    int fontpixelsize,
    int color,
  ) {
    return _ncnn_draw_text_c2(
      pixels,
      w,
      h,
      text,
      x,
      y,
      fontpixelsize,
      color,
    );
  }

  late final _ncnn_draw_text_c2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt)>>('ncnn_draw_text_c2');
  late final _ncnn_draw_text_c2 = _ncnn_draw_text_c2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.Char>, int, int, int, int)>();

  void ncnn_draw_text_c3(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    ffi.Pointer<ffi.Char> text,
    int x,
    int y,
    int fontpixelsize,
    int color,
  ) {
    return _ncnn_draw_text_c3(
      pixels,
      w,
      h,
      text,
      x,
      y,
      fontpixelsize,
      color,
    );
  }

  late final _ncnn_draw_text_c3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt)>>('ncnn_draw_text_c3');
  late final _ncnn_draw_text_c3 = _ncnn_draw_text_c3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.Char>, int, int, int, int)>();

  void ncnn_draw_text_c4(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int w,
    int h,
    ffi.Pointer<ffi.Char> text,
    int x,
    int y,
    int fontpixelsize,
    int color,
  ) {
    return _ncnn_draw_text_c4(
      pixels,
      w,
      h,
      text,
      x,
      y,
      fontpixelsize,
      color,
    );
  }

  late final _ncnn_draw_text_c4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt)>>('ncnn_draw_text_c4');
  late final _ncnn_draw_text_c4 = _ncnn_draw_text_c4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ncnn_extractor_t ncnn_extractor_create(
    ncnn_net_t net,
  ) {
    return _ncnn_extractor_create(
      net,
    );
  }

  late final _ncnn_extractor_createPtr =
      _lookup<ffi.NativeFunction<ncnn_extractor_t Function(ncnn_net_t)>>(
          'ncnn_extractor_create');
  late final _ncnn_extractor_create = _ncnn_extractor_createPtr
      .asFunction<ncnn_extractor_t Function(ncnn_net_t)>();

  void ncnn_extractor_destroy(
    ncnn_extractor_t ex,
  ) {
    return _ncnn_extractor_destroy(
      ex,
    );
  }

  late final _ncnn_extractor_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_extractor_t)>>(
          'ncnn_extractor_destroy');
  late final _ncnn_extractor_destroy =
      _ncnn_extractor_destroyPtr.asFunction<void Function(ncnn_extractor_t)>();

  int ncnn_extractor_extract(
    ncnn_extractor_t ex,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ncnn_mat_t> mat,
  ) {
    return _ncnn_extractor_extract(
      ex,
      name,
      mat,
    );
  }

  late final _ncnn_extractor_extractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_extractor_t, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ncnn_mat_t>)>>('ncnn_extractor_extract');
  late final _ncnn_extractor_extract = _ncnn_extractor_extractPtr.asFunction<
      int Function(
          ncnn_extractor_t, ffi.Pointer<ffi.Char>, ffi.Pointer<ncnn_mat_t>)>();

  int ncnn_extractor_extract_index(
    ncnn_extractor_t ex,
    int index,
    ffi.Pointer<ncnn_mat_t> mat,
  ) {
    return _ncnn_extractor_extract_index(
      ex,
      index,
      mat,
    );
  }

  late final _ncnn_extractor_extract_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_extractor_t, ffi.Int,
              ffi.Pointer<ncnn_mat_t>)>>('ncnn_extractor_extract_index');
  late final _ncnn_extractor_extract_index =
      _ncnn_extractor_extract_indexPtr.asFunction<
          int Function(ncnn_extractor_t, int, ffi.Pointer<ncnn_mat_t>)>();

  int ncnn_extractor_input(
    ncnn_extractor_t ex,
    ffi.Pointer<ffi.Char> name,
    ncnn_mat_t mat,
  ) {
    return _ncnn_extractor_input(
      ex,
      name,
      mat,
    );
  }

  late final _ncnn_extractor_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_extractor_t, ffi.Pointer<ffi.Char>,
              ncnn_mat_t)>>('ncnn_extractor_input');
  late final _ncnn_extractor_input = _ncnn_extractor_inputPtr.asFunction<
      int Function(ncnn_extractor_t, ffi.Pointer<ffi.Char>, ncnn_mat_t)>();

  int ncnn_extractor_input_index(
    ncnn_extractor_t ex,
    int index,
    ncnn_mat_t mat,
  ) {
    return _ncnn_extractor_input_index(
      ex,
      index,
      mat,
    );
  }

  late final _ncnn_extractor_input_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_extractor_t, ffi.Int,
              ncnn_mat_t)>>('ncnn_extractor_input_index');
  late final _ncnn_extractor_input_index = _ncnn_extractor_input_indexPtr
      .asFunction<int Function(ncnn_extractor_t, int, ncnn_mat_t)>();

  void ncnn_extractor_set_option(
    ncnn_extractor_t ex,
    ncnn_option_t opt,
  ) {
    return _ncnn_extractor_set_option(
      ex,
      opt,
    );
  }

  late final _ncnn_extractor_set_optionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ncnn_extractor_t, ncnn_option_t)>>(
      'ncnn_extractor_set_option');
  late final _ncnn_extractor_set_option = _ncnn_extractor_set_optionPtr
      .asFunction<void Function(ncnn_extractor_t, ncnn_option_t)>();

  void ncnn_flatten(
    ncnn_mat_t src,
    ffi.Pointer<ncnn_mat_t> dst,
    ncnn_option_t opt,
  ) {
    return _ncnn_flatten(
      src,
      dst,
      opt,
    );
  }

  late final _ncnn_flattenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ncnn_mat_t, ffi.Pointer<ncnn_mat_t>,
              ncnn_option_t)>>('ncnn_flatten');
  late final _ncnn_flatten = _ncnn_flattenPtr.asFunction<
      void Function(ncnn_mat_t, ffi.Pointer<ncnn_mat_t>, ncnn_option_t)>();

  ncnn_layer_t ncnn_layer_create() {
    return _ncnn_layer_create();
  }

  late final _ncnn_layer_createPtr =
      _lookup<ffi.NativeFunction<ncnn_layer_t Function()>>('ncnn_layer_create');
  late final _ncnn_layer_create =
      _ncnn_layer_createPtr.asFunction<ncnn_layer_t Function()>();

  ncnn_layer_t ncnn_layer_create_by_type(
    ffi.Pointer<ffi.Char> type,
  ) {
    return _ncnn_layer_create_by_type(
      type,
    );
  }

  late final _ncnn_layer_create_by_typePtr =
      _lookup<ffi.NativeFunction<ncnn_layer_t Function(ffi.Pointer<ffi.Char>)>>(
          'ncnn_layer_create_by_type');
  late final _ncnn_layer_create_by_type = _ncnn_layer_create_by_typePtr
      .asFunction<ncnn_layer_t Function(ffi.Pointer<ffi.Char>)>();

  ncnn_layer_t ncnn_layer_create_by_typeindex(
    int typeindex,
  ) {
    return _ncnn_layer_create_by_typeindex(
      typeindex,
    );
  }

  late final _ncnn_layer_create_by_typeindexPtr =
      _lookup<ffi.NativeFunction<ncnn_layer_t Function(ffi.Int)>>(
          'ncnn_layer_create_by_typeindex');
  late final _ncnn_layer_create_by_typeindex =
      _ncnn_layer_create_by_typeindexPtr
          .asFunction<ncnn_layer_t Function(int)>();

  void ncnn_layer_destroy(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_destroy(
      layer,
    );
  }

  late final _ncnn_layer_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t)>>(
          'ncnn_layer_destroy');
  late final _ncnn_layer_destroy =
      _ncnn_layer_destroyPtr.asFunction<void Function(ncnn_layer_t)>();

  int ncnn_layer_get_bottom(
    ncnn_layer_t layer,
    int i,
  ) {
    return _ncnn_layer_get_bottom(
      layer,
      i,
    );
  }

  late final _ncnn_layer_get_bottomPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_get_bottom');
  late final _ncnn_layer_get_bottom =
      _ncnn_layer_get_bottomPtr.asFunction<int Function(ncnn_layer_t, int)>();

  int ncnn_layer_get_bottom_count(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_bottom_count(
      layer,
    );
  }

  late final _ncnn_layer_get_bottom_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_bottom_count');
  late final _ncnn_layer_get_bottom_count =
      _ncnn_layer_get_bottom_countPtr.asFunction<int Function(ncnn_layer_t)>();

  ffi.Pointer<ffi.Char> ncnn_layer_get_name(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_name(
      layer,
    );
  }

  late final _ncnn_layer_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ncnn_layer_t)>>(
          'ncnn_layer_get_name');
  late final _ncnn_layer_get_name = _ncnn_layer_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ncnn_layer_t)>();

  int ncnn_layer_get_one_blob_only(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_one_blob_only(
      layer,
    );
  }

  late final _ncnn_layer_get_one_blob_onlyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_one_blob_only');
  late final _ncnn_layer_get_one_blob_only =
      _ncnn_layer_get_one_blob_onlyPtr.asFunction<int Function(ncnn_layer_t)>();

  int ncnn_layer_get_support_bf16_storage(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_support_bf16_storage(
      layer,
    );
  }

  late final _ncnn_layer_get_support_bf16_storagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_support_bf16_storage');
  late final _ncnn_layer_get_support_bf16_storage =
      _ncnn_layer_get_support_bf16_storagePtr
          .asFunction<int Function(ncnn_layer_t)>();

  int ncnn_layer_get_support_fp16_storage(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_support_fp16_storage(
      layer,
    );
  }

  late final _ncnn_layer_get_support_fp16_storagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_support_fp16_storage');
  late final _ncnn_layer_get_support_fp16_storage =
      _ncnn_layer_get_support_fp16_storagePtr
          .asFunction<int Function(ncnn_layer_t)>();

  int ncnn_layer_get_support_image_storage(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_support_image_storage(
      layer,
    );
  }

  late final _ncnn_layer_get_support_image_storagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_support_image_storage');
  late final _ncnn_layer_get_support_image_storage =
      _ncnn_layer_get_support_image_storagePtr
          .asFunction<int Function(ncnn_layer_t)>();

  int ncnn_layer_get_support_inplace(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_support_inplace(
      layer,
    );
  }

  late final _ncnn_layer_get_support_inplacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_support_inplace');
  late final _ncnn_layer_get_support_inplace =
      _ncnn_layer_get_support_inplacePtr
          .asFunction<int Function(ncnn_layer_t)>();

  int ncnn_layer_get_support_packing(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_support_packing(
      layer,
    );
  }

  late final _ncnn_layer_get_support_packingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_support_packing');
  late final _ncnn_layer_get_support_packing =
      _ncnn_layer_get_support_packingPtr
          .asFunction<int Function(ncnn_layer_t)>();

  int ncnn_layer_get_support_vulkan(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_support_vulkan(
      layer,
    );
  }

  late final _ncnn_layer_get_support_vulkanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_support_vulkan');
  late final _ncnn_layer_get_support_vulkan = _ncnn_layer_get_support_vulkanPtr
      .asFunction<int Function(ncnn_layer_t)>();

  int ncnn_layer_get_top(
    ncnn_layer_t layer,
    int i,
  ) {
    return _ncnn_layer_get_top(
      layer,
      i,
    );
  }

  late final _ncnn_layer_get_topPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_get_top');
  late final _ncnn_layer_get_top =
      _ncnn_layer_get_topPtr.asFunction<int Function(ncnn_layer_t, int)>();

  int ncnn_layer_get_top_count(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_top_count(
      layer,
    );
  }

  late final _ncnn_layer_get_top_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_top_count');
  late final _ncnn_layer_get_top_count =
      _ncnn_layer_get_top_countPtr.asFunction<int Function(ncnn_layer_t)>();

  ffi.Pointer<ffi.Char> ncnn_layer_get_type(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_type(
      layer,
    );
  }

  late final _ncnn_layer_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ncnn_layer_t)>>(
          'ncnn_layer_get_type');
  late final _ncnn_layer_get_type = _ncnn_layer_get_typePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ncnn_layer_t)>();

  int ncnn_layer_get_typeindex(
    ncnn_layer_t layer,
  ) {
    return _ncnn_layer_get_typeindex(
      layer,
    );
  }

  late final _ncnn_layer_get_typeindexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_layer_t)>>(
          'ncnn_layer_get_typeindex');
  late final _ncnn_layer_get_typeindex =
      _ncnn_layer_get_typeindexPtr.asFunction<int Function(ncnn_layer_t)>();

  void ncnn_layer_set_one_blob_only(
    ncnn_layer_t layer,
    int enable,
  ) {
    return _ncnn_layer_set_one_blob_only(
      layer,
      enable,
    );
  }

  late final _ncnn_layer_set_one_blob_onlyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_set_one_blob_only');
  late final _ncnn_layer_set_one_blob_only = _ncnn_layer_set_one_blob_onlyPtr
      .asFunction<void Function(ncnn_layer_t, int)>();

  void ncnn_layer_set_support_bf16_storage(
    ncnn_layer_t layer,
    int enable,
  ) {
    return _ncnn_layer_set_support_bf16_storage(
      layer,
      enable,
    );
  }

  late final _ncnn_layer_set_support_bf16_storagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_set_support_bf16_storage');
  late final _ncnn_layer_set_support_bf16_storage =
      _ncnn_layer_set_support_bf16_storagePtr
          .asFunction<void Function(ncnn_layer_t, int)>();

  void ncnn_layer_set_support_fp16_storage(
    ncnn_layer_t layer,
    int enable,
  ) {
    return _ncnn_layer_set_support_fp16_storage(
      layer,
      enable,
    );
  }

  late final _ncnn_layer_set_support_fp16_storagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_set_support_fp16_storage');
  late final _ncnn_layer_set_support_fp16_storage =
      _ncnn_layer_set_support_fp16_storagePtr
          .asFunction<void Function(ncnn_layer_t, int)>();

  void ncnn_layer_set_support_image_storage(
    ncnn_layer_t layer,
    int enable,
  ) {
    return _ncnn_layer_set_support_image_storage(
      layer,
      enable,
    );
  }

  late final _ncnn_layer_set_support_image_storagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_set_support_image_storage');
  late final _ncnn_layer_set_support_image_storage =
      _ncnn_layer_set_support_image_storagePtr
          .asFunction<void Function(ncnn_layer_t, int)>();

  void ncnn_layer_set_support_inplace(
    ncnn_layer_t layer,
    int enable,
  ) {
    return _ncnn_layer_set_support_inplace(
      layer,
      enable,
    );
  }

  late final _ncnn_layer_set_support_inplacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_set_support_inplace');
  late final _ncnn_layer_set_support_inplace =
      _ncnn_layer_set_support_inplacePtr
          .asFunction<void Function(ncnn_layer_t, int)>();

  void ncnn_layer_set_support_packing(
    ncnn_layer_t layer,
    int enable,
  ) {
    return _ncnn_layer_set_support_packing(
      layer,
      enable,
    );
  }

  late final _ncnn_layer_set_support_packingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_set_support_packing');
  late final _ncnn_layer_set_support_packing =
      _ncnn_layer_set_support_packingPtr
          .asFunction<void Function(ncnn_layer_t, int)>();

  void ncnn_layer_set_support_vulkan(
    ncnn_layer_t layer,
    int enable,
  ) {
    return _ncnn_layer_set_support_vulkan(
      layer,
      enable,
    );
  }

  late final _ncnn_layer_set_support_vulkanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t, ffi.Int)>>(
          'ncnn_layer_set_support_vulkan');
  late final _ncnn_layer_set_support_vulkan = _ncnn_layer_set_support_vulkanPtr
      .asFunction<void Function(ncnn_layer_t, int)>();

  int ncnn_layer_type_to_index(
    ffi.Pointer<ffi.Char> type,
  ) {
    return _ncnn_layer_type_to_index(
      type,
    );
  }

  late final _ncnn_layer_type_to_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'ncnn_layer_type_to_index');
  late final _ncnn_layer_type_to_index = _ncnn_layer_type_to_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ncnn_mat_t ncnn_mat_clone(
    ncnn_mat_t mat,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_clone(
      mat,
      allocator,
    );
  }

  late final _ncnn_mat_clonePtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ncnn_mat_t, ncnn_allocator_t)>>('ncnn_mat_clone');
  late final _ncnn_mat_clone = _ncnn_mat_clonePtr
      .asFunction<ncnn_mat_t Function(ncnn_mat_t, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create() {
    return _ncnn_mat_create();
  }

  late final _ncnn_mat_createPtr =
      _lookup<ffi.NativeFunction<ncnn_mat_t Function()>>('ncnn_mat_create');
  late final _ncnn_mat_create =
      _ncnn_mat_createPtr.asFunction<ncnn_mat_t Function()>();

  ncnn_mat_t ncnn_mat_create_1d(
    int w,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_1d(
      w,
      allocator,
    );
  }

  late final _ncnn_mat_create_1dPtr = _lookup<
          ffi.NativeFunction<ncnn_mat_t Function(ffi.Int, ncnn_allocator_t)>>(
      'ncnn_mat_create_1d');
  late final _ncnn_mat_create_1d = _ncnn_mat_create_1dPtr
      .asFunction<ncnn_mat_t Function(int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_1d_elem(
    int w,
    int elemsize,
    int elempack,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_1d_elem(
      w,
      elemsize,
      elempack,
      allocator,
    );
  }

  late final _ncnn_mat_create_1d_elemPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Size, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_create_1d_elem');
  late final _ncnn_mat_create_1d_elem = _ncnn_mat_create_1d_elemPtr
      .asFunction<ncnn_mat_t Function(int, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_2d(
    int w,
    int h,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_2d(
      w,
      h,
      allocator,
    );
  }

  late final _ncnn_mat_create_2dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ffi.Int, ffi.Int, ncnn_allocator_t)>>('ncnn_mat_create_2d');
  late final _ncnn_mat_create_2d = _ncnn_mat_create_2dPtr
      .asFunction<ncnn_mat_t Function(int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_2d_elem(
    int w,
    int h,
    int elemsize,
    int elempack,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_2d_elem(
      w,
      h,
      elemsize,
      elempack,
      allocator,
    );
  }

  late final _ncnn_mat_create_2d_elemPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Int, ffi.Size, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_create_2d_elem');
  late final _ncnn_mat_create_2d_elem = _ncnn_mat_create_2d_elemPtr
      .asFunction<ncnn_mat_t Function(int, int, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_3d(
    int w,
    int h,
    int c,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_3d(
      w,
      h,
      c,
      allocator,
    );
  }

  late final _ncnn_mat_create_3dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Int, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_create_3d');
  late final _ncnn_mat_create_3d = _ncnn_mat_create_3dPtr
      .asFunction<ncnn_mat_t Function(int, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_3d_elem(
    int w,
    int h,
    int c,
    int elemsize,
    int elempack,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_3d_elem(
      w,
      h,
      c,
      elemsize,
      elempack,
      allocator,
    );
  }

  late final _ncnn_mat_create_3d_elemPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Int, ffi.Int, ffi.Size, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_create_3d_elem');
  late final _ncnn_mat_create_3d_elem = _ncnn_mat_create_3d_elemPtr.asFunction<
      ncnn_mat_t Function(int, int, int, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_4d(
    int w,
    int h,
    int d,
    int c,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_4d(
      w,
      h,
      d,
      c,
      allocator,
    );
  }

  late final _ncnn_mat_create_4dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_create_4d');
  late final _ncnn_mat_create_4d = _ncnn_mat_create_4dPtr
      .asFunction<ncnn_mat_t Function(int, int, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_4d_elem(
    int w,
    int h,
    int d,
    int c,
    int elemsize,
    int elempack,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_4d_elem(
      w,
      h,
      d,
      c,
      elemsize,
      elempack,
      allocator,
    );
  }

  late final _ncnn_mat_create_4d_elemPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Size,
              ffi.Int, ncnn_allocator_t)>>('ncnn_mat_create_4d_elem');
  late final _ncnn_mat_create_4d_elem = _ncnn_mat_create_4d_elemPtr.asFunction<
      ncnn_mat_t Function(int, int, int, int, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_external_1d(
    int w,
    ffi.Pointer<ffi.Void> data,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_external_1d(
      w,
      data,
      allocator,
    );
  }

  late final _ncnn_mat_create_external_1dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ncnn_allocator_t)>>('ncnn_mat_create_external_1d');
  late final _ncnn_mat_create_external_1d =
      _ncnn_mat_create_external_1dPtr.asFunction<
          ncnn_mat_t Function(int, ffi.Pointer<ffi.Void>, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_external_1d_elem(
    int w,
    ffi.Pointer<ffi.Void> data,
    int elemsize,
    int elempack,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_external_1d_elem(
      w,
      data,
      elemsize,
      elempack,
      allocator,
    );
  }

  late final _ncnn_mat_create_external_1d_elemPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_create_external_1d_elem');
  late final _ncnn_mat_create_external_1d_elem =
      _ncnn_mat_create_external_1d_elemPtr.asFunction<
          ncnn_mat_t Function(
              int, ffi.Pointer<ffi.Void>, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_external_2d(
    int w,
    int h,
    ffi.Pointer<ffi.Void> data,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_external_2d(
      w,
      h,
      data,
      allocator,
    );
  }

  late final _ncnn_mat_create_external_2dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ncnn_allocator_t)>>('ncnn_mat_create_external_2d');
  late final _ncnn_mat_create_external_2d =
      _ncnn_mat_create_external_2dPtr.asFunction<
          ncnn_mat_t Function(
              int, int, ffi.Pointer<ffi.Void>, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_external_2d_elem(
    int w,
    int h,
    ffi.Pointer<ffi.Void> data,
    int elemsize,
    int elempack,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_external_2d_elem(
      w,
      h,
      data,
      elemsize,
      elempack,
      allocator,
    );
  }

  late final _ncnn_mat_create_external_2d_elemPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Int, ncnn_allocator_t)>>('ncnn_mat_create_external_2d_elem');
  late final _ncnn_mat_create_external_2d_elem =
      _ncnn_mat_create_external_2d_elemPtr.asFunction<
          ncnn_mat_t Function(
              int, int, ffi.Pointer<ffi.Void>, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_external_3d(
    int w,
    int h,
    int c,
    ffi.Pointer<ffi.Void> data,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_external_3d(
      w,
      h,
      c,
      data,
      allocator,
    );
  }

  late final _ncnn_mat_create_external_3dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ncnn_allocator_t)>>('ncnn_mat_create_external_3d');
  late final _ncnn_mat_create_external_3d =
      _ncnn_mat_create_external_3dPtr.asFunction<
          ncnn_mat_t Function(
              int, int, int, ffi.Pointer<ffi.Void>, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_external_3d_elem(
    int w,
    int h,
    int c,
    ffi.Pointer<ffi.Void> data,
    int elemsize,
    int elempack,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_external_3d_elem(
      w,
      h,
      c,
      data,
      elemsize,
      elempack,
      allocator,
    );
  }

  late final _ncnn_mat_create_external_3d_elemPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_create_external_3d_elem');
  late final _ncnn_mat_create_external_3d_elem =
      _ncnn_mat_create_external_3d_elemPtr.asFunction<
          ncnn_mat_t Function(int, int, int, ffi.Pointer<ffi.Void>, int, int,
              ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_external_4d(
    int w,
    int h,
    int d,
    int c,
    ffi.Pointer<ffi.Void> data,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_external_4d(
      w,
      h,
      d,
      c,
      data,
      allocator,
    );
  }

  late final _ncnn_mat_create_external_4dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ncnn_allocator_t)>>('ncnn_mat_create_external_4d');
  late final _ncnn_mat_create_external_4d =
      _ncnn_mat_create_external_4dPtr.asFunction<
          ncnn_mat_t Function(
              int, int, int, int, ffi.Pointer<ffi.Void>, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_create_external_4d_elem(
    int w,
    int h,
    int d,
    int c,
    ffi.Pointer<ffi.Void> data,
    int elemsize,
    int elempack,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_create_external_4d_elem(
      w,
      h,
      d,
      c,
      data,
      elemsize,
      elempack,
      allocator,
    );
  }

  late final _ncnn_mat_create_external_4d_elemPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_create_external_4d_elem');
  late final _ncnn_mat_create_external_4d_elem =
      _ncnn_mat_create_external_4d_elemPtr.asFunction<
          ncnn_mat_t Function(int, int, int, int, ffi.Pointer<ffi.Void>, int,
              int, ncnn_allocator_t)>();

  void ncnn_mat_destroy(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_destroy(
      mat,
    );
  }

  late final _ncnn_mat_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_mat_t)>>(
          'ncnn_mat_destroy');
  late final _ncnn_mat_destroy =
      _ncnn_mat_destroyPtr.asFunction<void Function(ncnn_mat_t)>();

  void ncnn_mat_fill_float(
    ncnn_mat_t mat,
    double v,
  ) {
    return _ncnn_mat_fill_float(
      mat,
      v,
    );
  }

  late final _ncnn_mat_fill_floatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_mat_t, ffi.Float)>>(
          'ncnn_mat_fill_float');
  late final _ncnn_mat_fill_float =
      _ncnn_mat_fill_floatPtr.asFunction<void Function(ncnn_mat_t, double)>();

  ncnn_mat_t ncnn_mat_from_pixels(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int type,
    int w,
    int h,
    int stride,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_from_pixels(
      pixels,
      type,
      w,
      h,
      stride,
      allocator,
    );
  }

  late final _ncnn_mat_from_pixelsPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ncnn_allocator_t)>>('ncnn_mat_from_pixels');
  late final _ncnn_mat_from_pixels = _ncnn_mat_from_pixelsPtr.asFunction<
      ncnn_mat_t Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int,
          ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_from_pixels_resize(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int type,
    int w,
    int h,
    int stride,
    int target_width,
    int target_height,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_from_pixels_resize(
      pixels,
      type,
      w,
      h,
      stride,
      target_width,
      target_height,
      allocator,
    );
  }

  late final _ncnn_mat_from_pixels_resizePtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_from_pixels_resize');
  late final _ncnn_mat_from_pixels_resize =
      _ncnn_mat_from_pixels_resizePtr.asFunction<
          ncnn_mat_t Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int,
              int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_from_pixels_roi(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int type,
    int w,
    int h,
    int stride,
    int roix,
    int roiy,
    int roiw,
    int roih,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_from_pixels_roi(
      pixels,
      type,
      w,
      h,
      stride,
      roix,
      roiy,
      roiw,
      roih,
      allocator,
    );
  }

  late final _ncnn_mat_from_pixels_roiPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_from_pixels_roi');
  late final _ncnn_mat_from_pixels_roi =
      _ncnn_mat_from_pixels_roiPtr.asFunction<
          ncnn_mat_t Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int,
              int, int, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_from_pixels_roi_resize(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int type,
    int w,
    int h,
    int stride,
    int roix,
    int roiy,
    int roiw,
    int roih,
    int target_width,
    int target_height,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_from_pixels_roi_resize(
      pixels,
      type,
      w,
      h,
      stride,
      roix,
      roiy,
      roiw,
      roih,
      target_width,
      target_height,
      allocator,
    );
  }

  late final _ncnn_mat_from_pixels_roi_resizePtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_from_pixels_roi_resize');
  late final _ncnn_mat_from_pixels_roi_resize =
      _ncnn_mat_from_pixels_roi_resizePtr.asFunction<
          ncnn_mat_t Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int, int,
              int, int, int, int, int, int, ncnn_allocator_t)>();

  int ncnn_mat_get_c(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_c(
      mat,
    );
  }

  late final _ncnn_mat_get_cPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_mat_t)>>(
          'ncnn_mat_get_c');
  late final _ncnn_mat_get_c =
      _ncnn_mat_get_cPtr.asFunction<int Function(ncnn_mat_t)>();

  ffi.Pointer<ffi.Void> ncnn_mat_get_channel_data(
    ncnn_mat_t mat,
    int c,
  ) {
    return _ncnn_mat_get_channel_data(
      mat,
      c,
    );
  }

  late final _ncnn_mat_get_channel_dataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ncnn_mat_t, ffi.Int)>>(
      'ncnn_mat_get_channel_data');
  late final _ncnn_mat_get_channel_data = _ncnn_mat_get_channel_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ncnn_mat_t, int)>();

  int ncnn_mat_get_cstep(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_cstep(
      mat,
    );
  }

  late final _ncnn_mat_get_cstepPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ncnn_mat_t)>>(
          'ncnn_mat_get_cstep');
  late final _ncnn_mat_get_cstep =
      _ncnn_mat_get_cstepPtr.asFunction<int Function(ncnn_mat_t)>();

  int ncnn_mat_get_d(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_d(
      mat,
    );
  }

  late final _ncnn_mat_get_dPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_mat_t)>>(
          'ncnn_mat_get_d');
  late final _ncnn_mat_get_d =
      _ncnn_mat_get_dPtr.asFunction<int Function(ncnn_mat_t)>();

  ffi.Pointer<ffi.Void> ncnn_mat_get_data(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_data(
      mat,
    );
  }

  late final _ncnn_mat_get_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ncnn_mat_t)>>(
          'ncnn_mat_get_data');
  late final _ncnn_mat_get_data = _ncnn_mat_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ncnn_mat_t)>();

  int ncnn_mat_get_dims(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_dims(
      mat,
    );
  }

  late final _ncnn_mat_get_dimsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_mat_t)>>(
          'ncnn_mat_get_dims');
  late final _ncnn_mat_get_dims =
      _ncnn_mat_get_dimsPtr.asFunction<int Function(ncnn_mat_t)>();

  int ncnn_mat_get_elempack(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_elempack(
      mat,
    );
  }

  late final _ncnn_mat_get_elempackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_mat_t)>>(
          'ncnn_mat_get_elempack');
  late final _ncnn_mat_get_elempack =
      _ncnn_mat_get_elempackPtr.asFunction<int Function(ncnn_mat_t)>();

  int ncnn_mat_get_elemsize(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_elemsize(
      mat,
    );
  }

  late final _ncnn_mat_get_elemsizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ncnn_mat_t)>>(
          'ncnn_mat_get_elemsize');
  late final _ncnn_mat_get_elemsize =
      _ncnn_mat_get_elemsizePtr.asFunction<int Function(ncnn_mat_t)>();

  int ncnn_mat_get_h(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_h(
      mat,
    );
  }

  late final _ncnn_mat_get_hPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_mat_t)>>(
          'ncnn_mat_get_h');
  late final _ncnn_mat_get_h =
      _ncnn_mat_get_hPtr.asFunction<int Function(ncnn_mat_t)>();

  int ncnn_mat_get_w(
    ncnn_mat_t mat,
  ) {
    return _ncnn_mat_get_w(
      mat,
    );
  }

  late final _ncnn_mat_get_wPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_mat_t)>>(
          'ncnn_mat_get_w');
  late final _ncnn_mat_get_w =
      _ncnn_mat_get_wPtr.asFunction<int Function(ncnn_mat_t)>();

  ncnn_mat_t ncnn_mat_reshape_1d(
    ncnn_mat_t mat,
    int w,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_reshape_1d(
      mat,
      w,
      allocator,
    );
  }

  late final _ncnn_mat_reshape_1dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ncnn_mat_t, ffi.Int, ncnn_allocator_t)>>('ncnn_mat_reshape_1d');
  late final _ncnn_mat_reshape_1d = _ncnn_mat_reshape_1dPtr
      .asFunction<ncnn_mat_t Function(ncnn_mat_t, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_reshape_2d(
    ncnn_mat_t mat,
    int w,
    int h,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_reshape_2d(
      mat,
      w,
      h,
      allocator,
    );
  }

  late final _ncnn_mat_reshape_2dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ncnn_mat_t, ffi.Int, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_reshape_2d');
  late final _ncnn_mat_reshape_2d = _ncnn_mat_reshape_2dPtr.asFunction<
      ncnn_mat_t Function(ncnn_mat_t, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_reshape_3d(
    ncnn_mat_t mat,
    int w,
    int h,
    int c,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_reshape_3d(
      mat,
      w,
      h,
      c,
      allocator,
    );
  }

  late final _ncnn_mat_reshape_3dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ncnn_mat_t, ffi.Int, ffi.Int, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_reshape_3d');
  late final _ncnn_mat_reshape_3d = _ncnn_mat_reshape_3dPtr.asFunction<
      ncnn_mat_t Function(ncnn_mat_t, int, int, int, ncnn_allocator_t)>();

  ncnn_mat_t ncnn_mat_reshape_4d(
    ncnn_mat_t mat,
    int w,
    int h,
    int d,
    int c,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_mat_reshape_4d(
      mat,
      w,
      h,
      d,
      c,
      allocator,
    );
  }

  late final _ncnn_mat_reshape_4dPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ncnn_mat_t, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ncnn_allocator_t)>>('ncnn_mat_reshape_4d');
  late final _ncnn_mat_reshape_4d = _ncnn_mat_reshape_4dPtr.asFunction<
      ncnn_mat_t Function(ncnn_mat_t, int, int, int, int, ncnn_allocator_t)>();

  void ncnn_mat_substract_mean_normalize(
    ncnn_mat_t mat,
    ffi.Pointer<ffi.Float> mean_vals,
    ffi.Pointer<ffi.Float> norm_vals,
  ) {
    return _ncnn_mat_substract_mean_normalize(
      mat,
      mean_vals,
      norm_vals,
    );
  }

  late final _ncnn_mat_substract_mean_normalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ncnn_mat_t, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ncnn_mat_substract_mean_normalize');
  late final _ncnn_mat_substract_mean_normalize =
      _ncnn_mat_substract_mean_normalizePtr.asFunction<
          void Function(
              ncnn_mat_t, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void ncnn_mat_to_pixels(
    ncnn_mat_t mat,
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int type,
    int stride,
  ) {
    return _ncnn_mat_to_pixels(
      mat,
      pixels,
      type,
      stride,
    );
  }

  late final _ncnn_mat_to_pixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ncnn_mat_t, ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int)>>('ncnn_mat_to_pixels');
  late final _ncnn_mat_to_pixels = _ncnn_mat_to_pixelsPtr.asFunction<
      void Function(ncnn_mat_t, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  void ncnn_mat_to_pixels_resize(
    ncnn_mat_t mat,
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int type,
    int target_width,
    int target_height,
    int target_stride,
  ) {
    return _ncnn_mat_to_pixels_resize(
      mat,
      pixels,
      type,
      target_width,
      target_height,
      target_stride,
    );
  }

  late final _ncnn_mat_to_pixels_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ncnn_mat_t, ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('ncnn_mat_to_pixels_resize');
  late final _ncnn_mat_to_pixels_resize =
      _ncnn_mat_to_pixels_resizePtr.asFunction<
          void Function(
              ncnn_mat_t, ffi.Pointer<ffi.UnsignedChar>, int, int, int, int)>();

  ncnn_modelbin_t ncnn_modelbin_create_from_datareader(
    ncnn_datareader_t dr,
  ) {
    return _ncnn_modelbin_create_from_datareader(
      dr,
    );
  }

  late final _ncnn_modelbin_create_from_datareaderPtr =
      _lookup<ffi.NativeFunction<ncnn_modelbin_t Function(ncnn_datareader_t)>>(
          'ncnn_modelbin_create_from_datareader');
  late final _ncnn_modelbin_create_from_datareader =
      _ncnn_modelbin_create_from_datareaderPtr
          .asFunction<ncnn_modelbin_t Function(ncnn_datareader_t)>();

  ncnn_modelbin_t ncnn_modelbin_create_from_mat_array(
    ffi.Pointer<ncnn_mat_t> weights,
    int n,
  ) {
    return _ncnn_modelbin_create_from_mat_array(
      weights,
      n,
    );
  }

  late final _ncnn_modelbin_create_from_mat_arrayPtr = _lookup<
      ffi.NativeFunction<
          ncnn_modelbin_t Function(ffi.Pointer<ncnn_mat_t>,
              ffi.Int)>>('ncnn_modelbin_create_from_mat_array');
  late final _ncnn_modelbin_create_from_mat_array =
      _ncnn_modelbin_create_from_mat_arrayPtr
          .asFunction<ncnn_modelbin_t Function(ffi.Pointer<ncnn_mat_t>, int)>();

  void ncnn_modelbin_destroy(
    ncnn_modelbin_t mb,
  ) {
    return _ncnn_modelbin_destroy(
      mb,
    );
  }

  late final _ncnn_modelbin_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_modelbin_t)>>(
          'ncnn_modelbin_destroy');
  late final _ncnn_modelbin_destroy =
      _ncnn_modelbin_destroyPtr.asFunction<void Function(ncnn_modelbin_t)>();

  void ncnn_net_clear(
    ncnn_net_t net,
  ) {
    return _ncnn_net_clear(
      net,
    );
  }

  late final _ncnn_net_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_net_t)>>(
          'ncnn_net_clear');
  late final _ncnn_net_clear =
      _ncnn_net_clearPtr.asFunction<void Function(ncnn_net_t)>();

  ncnn_net_t ncnn_net_create() {
    return _ncnn_net_create();
  }

  late final _ncnn_net_createPtr =
      _lookup<ffi.NativeFunction<ncnn_net_t Function()>>('ncnn_net_create');
  late final _ncnn_net_create =
      _ncnn_net_createPtr.asFunction<ncnn_net_t Function()>();

  void ncnn_net_destroy(
    ncnn_net_t net,
  ) {
    return _ncnn_net_destroy(
      net,
    );
  }

  late final _ncnn_net_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_net_t)>>(
          'ncnn_net_destroy');
  late final _ncnn_net_destroy =
      _ncnn_net_destroyPtr.asFunction<void Function(ncnn_net_t)>();

  int ncnn_net_get_input_count(
    ncnn_net_t net,
  ) {
    return _ncnn_net_get_input_count(
      net,
    );
  }

  late final _ncnn_net_get_input_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_net_t)>>(
          'ncnn_net_get_input_count');
  late final _ncnn_net_get_input_count =
      _ncnn_net_get_input_countPtr.asFunction<int Function(ncnn_net_t)>();

  int ncnn_net_get_input_index(
    ncnn_net_t net,
    int i,
  ) {
    return _ncnn_net_get_input_index(
      net,
      i,
    );
  }

  late final _ncnn_net_get_input_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_net_t, ffi.Int)>>(
          'ncnn_net_get_input_index');
  late final _ncnn_net_get_input_index =
      _ncnn_net_get_input_indexPtr.asFunction<int Function(ncnn_net_t, int)>();

  ffi.Pointer<ffi.Char> ncnn_net_get_input_name(
    ncnn_net_t net,
    int i,
  ) {
    return _ncnn_net_get_input_name(
      net,
      i,
    );
  }

  late final _ncnn_net_get_input_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ncnn_net_t, ffi.Int)>>(
      'ncnn_net_get_input_name');
  late final _ncnn_net_get_input_name = _ncnn_net_get_input_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ncnn_net_t, int)>();

  ncnn_option_t ncnn_net_get_option(
    ncnn_net_t net,
  ) {
    return _ncnn_net_get_option(
      net,
    );
  }

  late final _ncnn_net_get_optionPtr =
      _lookup<ffi.NativeFunction<ncnn_option_t Function(ncnn_net_t)>>(
          'ncnn_net_get_option');
  late final _ncnn_net_get_option =
      _ncnn_net_get_optionPtr.asFunction<ncnn_option_t Function(ncnn_net_t)>();

  int ncnn_net_get_output_count(
    ncnn_net_t net,
  ) {
    return _ncnn_net_get_output_count(
      net,
    );
  }

  late final _ncnn_net_get_output_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_net_t)>>(
          'ncnn_net_get_output_count');
  late final _ncnn_net_get_output_count =
      _ncnn_net_get_output_countPtr.asFunction<int Function(ncnn_net_t)>();

  int ncnn_net_get_output_index(
    ncnn_net_t net,
    int i,
  ) {
    return _ncnn_net_get_output_index(
      net,
      i,
    );
  }

  late final _ncnn_net_get_output_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_net_t, ffi.Int)>>(
          'ncnn_net_get_output_index');
  late final _ncnn_net_get_output_index =
      _ncnn_net_get_output_indexPtr.asFunction<int Function(ncnn_net_t, int)>();

  ffi.Pointer<ffi.Char> ncnn_net_get_output_name(
    ncnn_net_t net,
    int i,
  ) {
    return _ncnn_net_get_output_name(
      net,
      i,
    );
  }

  late final _ncnn_net_get_output_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ncnn_net_t, ffi.Int)>>(
      'ncnn_net_get_output_name');
  late final _ncnn_net_get_output_name = _ncnn_net_get_output_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ncnn_net_t, int)>();

  int ncnn_net_load_model(
    ncnn_net_t net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ncnn_net_load_model(
      net,
      path,
    );
  }

  late final _ncnn_net_load_modelPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ncnn_net_t, ffi.Pointer<ffi.Char>)>>(
      'ncnn_net_load_model');
  late final _ncnn_net_load_model = _ncnn_net_load_modelPtr
      .asFunction<int Function(ncnn_net_t, ffi.Pointer<ffi.Char>)>();

  int ncnn_net_load_model_datareader(
    ncnn_net_t net,
    ncnn_datareader_t dr,
  ) {
    return _ncnn_net_load_model_datareader(
      net,
      dr,
    );
  }

  late final _ncnn_net_load_model_datareaderPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ncnn_net_t, ncnn_datareader_t)>>(
      'ncnn_net_load_model_datareader');
  late final _ncnn_net_load_model_datareader =
      _ncnn_net_load_model_datareaderPtr
          .asFunction<int Function(ncnn_net_t, ncnn_datareader_t)>();

  int ncnn_net_load_model_memory(
    ncnn_net_t net,
    ffi.Pointer<ffi.UnsignedChar> mem,
  ) {
    return _ncnn_net_load_model_memory(
      net,
      mem,
    );
  }

  late final _ncnn_net_load_model_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_net_t,
              ffi.Pointer<ffi.UnsignedChar>)>>('ncnn_net_load_model_memory');
  late final _ncnn_net_load_model_memory = _ncnn_net_load_model_memoryPtr
      .asFunction<int Function(ncnn_net_t, ffi.Pointer<ffi.UnsignedChar>)>();

  int ncnn_net_load_param(
    ncnn_net_t net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ncnn_net_load_param(
      net,
      path,
    );
  }

  late final _ncnn_net_load_paramPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ncnn_net_t, ffi.Pointer<ffi.Char>)>>(
      'ncnn_net_load_param');
  late final _ncnn_net_load_param = _ncnn_net_load_paramPtr
      .asFunction<int Function(ncnn_net_t, ffi.Pointer<ffi.Char>)>();

  int ncnn_net_load_param_bin(
    ncnn_net_t net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ncnn_net_load_param_bin(
      net,
      path,
    );
  }

  late final _ncnn_net_load_param_binPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ncnn_net_t, ffi.Pointer<ffi.Char>)>>(
      'ncnn_net_load_param_bin');
  late final _ncnn_net_load_param_bin = _ncnn_net_load_param_binPtr
      .asFunction<int Function(ncnn_net_t, ffi.Pointer<ffi.Char>)>();

  int ncnn_net_load_param_bin_datareader(
    ncnn_net_t net,
    ncnn_datareader_t dr,
  ) {
    return _ncnn_net_load_param_bin_datareader(
      net,
      dr,
    );
  }

  late final _ncnn_net_load_param_bin_datareaderPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ncnn_net_t, ncnn_datareader_t)>>(
      'ncnn_net_load_param_bin_datareader');
  late final _ncnn_net_load_param_bin_datareader =
      _ncnn_net_load_param_bin_datareaderPtr
          .asFunction<int Function(ncnn_net_t, ncnn_datareader_t)>();

  int ncnn_net_load_param_bin_memory(
    ncnn_net_t net,
    ffi.Pointer<ffi.UnsignedChar> mem,
  ) {
    return _ncnn_net_load_param_bin_memory(
      net,
      mem,
    );
  }

  late final _ncnn_net_load_param_bin_memoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ncnn_net_t, ffi.Pointer<ffi.UnsignedChar>)>>(
      'ncnn_net_load_param_bin_memory');
  late final _ncnn_net_load_param_bin_memory =
      _ncnn_net_load_param_bin_memoryPtr.asFunction<
          int Function(ncnn_net_t, ffi.Pointer<ffi.UnsignedChar>)>();

  int ncnn_net_load_param_datareader(
    ncnn_net_t net,
    ncnn_datareader_t dr,
  ) {
    return _ncnn_net_load_param_datareader(
      net,
      dr,
    );
  }

  late final _ncnn_net_load_param_datareaderPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ncnn_net_t, ncnn_datareader_t)>>(
      'ncnn_net_load_param_datareader');
  late final _ncnn_net_load_param_datareader =
      _ncnn_net_load_param_datareaderPtr
          .asFunction<int Function(ncnn_net_t, ncnn_datareader_t)>();

  int ncnn_net_load_param_memory(
    ncnn_net_t net,
    ffi.Pointer<ffi.Char> mem,
  ) {
    return _ncnn_net_load_param_memory(
      net,
      mem,
    );
  }

  late final _ncnn_net_load_param_memoryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ncnn_net_t, ffi.Pointer<ffi.Char>)>>(
      'ncnn_net_load_param_memory');
  late final _ncnn_net_load_param_memory = _ncnn_net_load_param_memoryPtr
      .asFunction<int Function(ncnn_net_t, ffi.Pointer<ffi.Char>)>();

  void ncnn_net_register_custom_layer_by_type(
    ncnn_net_t net,
    ffi.Pointer<ffi.Char> type,
    ncnn_layer_creator_t creator,
    ncnn_layer_destroyer_t destroyer,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ncnn_net_register_custom_layer_by_type(
      net,
      type,
      creator,
      destroyer,
      userdata,
    );
  }

  late final _ncnn_net_register_custom_layer_by_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ncnn_net_t,
                  ffi.Pointer<ffi.Char>,
                  ncnn_layer_creator_t,
                  ncnn_layer_destroyer_t,
                  ffi.Pointer<ffi.Void>)>>(
      'ncnn_net_register_custom_layer_by_type');
  late final _ncnn_net_register_custom_layer_by_type =
      _ncnn_net_register_custom_layer_by_typePtr.asFunction<
          void Function(ncnn_net_t, ffi.Pointer<ffi.Char>, ncnn_layer_creator_t,
              ncnn_layer_destroyer_t, ffi.Pointer<ffi.Void>)>();

  void ncnn_net_register_custom_layer_by_typeindex(
    ncnn_net_t net,
    int typeindex,
    ncnn_layer_creator_t creator,
    ncnn_layer_destroyer_t destroyer,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ncnn_net_register_custom_layer_by_typeindex(
      net,
      typeindex,
      creator,
      destroyer,
      userdata,
    );
  }

  late final _ncnn_net_register_custom_layer_by_typeindexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ncnn_net_t, ffi.Int, ncnn_layer_creator_t,
                  ncnn_layer_destroyer_t, ffi.Pointer<ffi.Void>)>>(
      'ncnn_net_register_custom_layer_by_typeindex');
  late final _ncnn_net_register_custom_layer_by_typeindex =
      _ncnn_net_register_custom_layer_by_typeindexPtr.asFunction<
          void Function(ncnn_net_t, int, ncnn_layer_creator_t,
              ncnn_layer_destroyer_t, ffi.Pointer<ffi.Void>)>();

  void ncnn_net_set_option(
    ncnn_net_t net,
    ncnn_option_t opt,
  ) {
    return _ncnn_net_set_option(
      net,
      opt,
    );
  }

  late final _ncnn_net_set_optionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_net_t, ncnn_option_t)>>(
          'ncnn_net_set_option');
  late final _ncnn_net_set_option = _ncnn_net_set_optionPtr
      .asFunction<void Function(ncnn_net_t, ncnn_option_t)>();

  void ncnn_net_set_vulkan_device(
    ncnn_net_t net,
    int device_index,
  ) {
    return _ncnn_net_set_vulkan_device(
      net,
      device_index,
    );
  }

  late final _ncnn_net_set_vulkan_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_net_t, ffi.Int)>>(
          'ncnn_net_set_vulkan_device');
  late final _ncnn_net_set_vulkan_device = _ncnn_net_set_vulkan_devicePtr
      .asFunction<void Function(ncnn_net_t, int)>();

  ncnn_option_t ncnn_option_create() {
    return _ncnn_option_create();
  }

  late final _ncnn_option_createPtr =
      _lookup<ffi.NativeFunction<ncnn_option_t Function()>>(
          'ncnn_option_create');
  late final _ncnn_option_create =
      _ncnn_option_createPtr.asFunction<ncnn_option_t Function()>();

  void ncnn_option_destroy(
    ncnn_option_t opt,
  ) {
    return _ncnn_option_destroy(
      opt,
    );
  }

  late final _ncnn_option_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_option_t)>>(
          'ncnn_option_destroy');
  late final _ncnn_option_destroy =
      _ncnn_option_destroyPtr.asFunction<void Function(ncnn_option_t)>();

  int ncnn_option_get_num_threads(
    ncnn_option_t opt,
  ) {
    return _ncnn_option_get_num_threads(
      opt,
    );
  }

  late final _ncnn_option_get_num_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_option_t)>>(
          'ncnn_option_get_num_threads');
  late final _ncnn_option_get_num_threads =
      _ncnn_option_get_num_threadsPtr.asFunction<int Function(ncnn_option_t)>();

  int ncnn_option_get_use_local_pool_allocator(
    ncnn_option_t opt,
  ) {
    return _ncnn_option_get_use_local_pool_allocator(
      opt,
    );
  }

  late final _ncnn_option_get_use_local_pool_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_option_t)>>(
          'ncnn_option_get_use_local_pool_allocator');
  late final _ncnn_option_get_use_local_pool_allocator =
      _ncnn_option_get_use_local_pool_allocatorPtr
          .asFunction<int Function(ncnn_option_t)>();

  int ncnn_option_get_use_vulkan_compute(
    ncnn_option_t opt,
  ) {
    return _ncnn_option_get_use_vulkan_compute(
      opt,
    );
  }

  late final _ncnn_option_get_use_vulkan_computePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_option_t)>>(
          'ncnn_option_get_use_vulkan_compute');
  late final _ncnn_option_get_use_vulkan_compute =
      _ncnn_option_get_use_vulkan_computePtr
          .asFunction<int Function(ncnn_option_t)>();

  void ncnn_option_set_blob_allocator(
    ncnn_option_t opt,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_option_set_blob_allocator(
      opt,
      allocator,
    );
  }

  late final _ncnn_option_set_blob_allocatorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ncnn_option_t, ncnn_allocator_t)>>(
      'ncnn_option_set_blob_allocator');
  late final _ncnn_option_set_blob_allocator =
      _ncnn_option_set_blob_allocatorPtr
          .asFunction<void Function(ncnn_option_t, ncnn_allocator_t)>();

  void ncnn_option_set_num_threads(
    ncnn_option_t opt,
    int num_threads,
  ) {
    return _ncnn_option_set_num_threads(
      opt,
      num_threads,
    );
  }

  late final _ncnn_option_set_num_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_option_t, ffi.Int)>>(
          'ncnn_option_set_num_threads');
  late final _ncnn_option_set_num_threads = _ncnn_option_set_num_threadsPtr
      .asFunction<void Function(ncnn_option_t, int)>();

  void ncnn_option_set_use_local_pool_allocator(
    ncnn_option_t opt,
    int use_local_pool_allocator,
  ) {
    return _ncnn_option_set_use_local_pool_allocator(
      opt,
      use_local_pool_allocator,
    );
  }

  late final _ncnn_option_set_use_local_pool_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_option_t, ffi.Int)>>(
          'ncnn_option_set_use_local_pool_allocator');
  late final _ncnn_option_set_use_local_pool_allocator =
      _ncnn_option_set_use_local_pool_allocatorPtr
          .asFunction<void Function(ncnn_option_t, int)>();

  void ncnn_option_set_use_vulkan_compute(
    ncnn_option_t opt,
    int use_vulkan_compute,
  ) {
    return _ncnn_option_set_use_vulkan_compute(
      opt,
      use_vulkan_compute,
    );
  }

  late final _ncnn_option_set_use_vulkan_computePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_option_t, ffi.Int)>>(
          'ncnn_option_set_use_vulkan_compute');
  late final _ncnn_option_set_use_vulkan_compute =
      _ncnn_option_set_use_vulkan_computePtr
          .asFunction<void Function(ncnn_option_t, int)>();

  void ncnn_option_set_workspace_allocator(
    ncnn_option_t opt,
    ncnn_allocator_t allocator,
  ) {
    return _ncnn_option_set_workspace_allocator(
      opt,
      allocator,
    );
  }

  late final _ncnn_option_set_workspace_allocatorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ncnn_option_t, ncnn_allocator_t)>>(
      'ncnn_option_set_workspace_allocator');
  late final _ncnn_option_set_workspace_allocator =
      _ncnn_option_set_workspace_allocatorPtr
          .asFunction<void Function(ncnn_option_t, ncnn_allocator_t)>();

  ncnn_paramdict_t ncnn_paramdict_create() {
    return _ncnn_paramdict_create();
  }

  late final _ncnn_paramdict_createPtr =
      _lookup<ffi.NativeFunction<ncnn_paramdict_t Function()>>(
          'ncnn_paramdict_create');
  late final _ncnn_paramdict_create =
      _ncnn_paramdict_createPtr.asFunction<ncnn_paramdict_t Function()>();

  void ncnn_paramdict_destroy(
    ncnn_paramdict_t pd,
  ) {
    return _ncnn_paramdict_destroy(
      pd,
    );
  }

  late final _ncnn_paramdict_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ncnn_paramdict_t)>>(
          'ncnn_paramdict_destroy');
  late final _ncnn_paramdict_destroy =
      _ncnn_paramdict_destroyPtr.asFunction<void Function(ncnn_paramdict_t)>();

  ncnn_mat_t ncnn_paramdict_get_array(
    ncnn_paramdict_t pd,
    int id,
    ncnn_mat_t def,
  ) {
    return _ncnn_paramdict_get_array(
      pd,
      id,
      def,
    );
  }

  late final _ncnn_paramdict_get_arrayPtr = _lookup<
      ffi.NativeFunction<
          ncnn_mat_t Function(ncnn_paramdict_t, ffi.Int,
              ncnn_mat_t)>>('ncnn_paramdict_get_array');
  late final _ncnn_paramdict_get_array = _ncnn_paramdict_get_arrayPtr
      .asFunction<ncnn_mat_t Function(ncnn_paramdict_t, int, ncnn_mat_t)>();

  double ncnn_paramdict_get_float(
    ncnn_paramdict_t pd,
    int id,
    double def,
  ) {
    return _ncnn_paramdict_get_float(
      pd,
      id,
      def,
    );
  }

  late final _ncnn_paramdict_get_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ncnn_paramdict_t, ffi.Int,
              ffi.Float)>>('ncnn_paramdict_get_float');
  late final _ncnn_paramdict_get_float = _ncnn_paramdict_get_floatPtr
      .asFunction<double Function(ncnn_paramdict_t, int, double)>();

  int ncnn_paramdict_get_int(
    ncnn_paramdict_t pd,
    int id,
    int def,
  ) {
    return _ncnn_paramdict_get_int(
      pd,
      id,
      def,
    );
  }

  late final _ncnn_paramdict_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ncnn_paramdict_t, ffi.Int, ffi.Int)>>('ncnn_paramdict_get_int');
  late final _ncnn_paramdict_get_int = _ncnn_paramdict_get_intPtr
      .asFunction<int Function(ncnn_paramdict_t, int, int)>();

  int ncnn_paramdict_get_type(
    ncnn_paramdict_t pd,
    int id,
  ) {
    return _ncnn_paramdict_get_type(
      pd,
      id,
    );
  }

  late final _ncnn_paramdict_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ncnn_paramdict_t, ffi.Int)>>(
          'ncnn_paramdict_get_type');
  late final _ncnn_paramdict_get_type = _ncnn_paramdict_get_typePtr
      .asFunction<int Function(ncnn_paramdict_t, int)>();

  void ncnn_paramdict_set_array(
    ncnn_paramdict_t pd,
    int id,
    ncnn_mat_t v,
  ) {
    return _ncnn_paramdict_set_array(
      pd,
      id,
      v,
    );
  }

  late final _ncnn_paramdict_set_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ncnn_paramdict_t, ffi.Int,
              ncnn_mat_t)>>('ncnn_paramdict_set_array');
  late final _ncnn_paramdict_set_array = _ncnn_paramdict_set_arrayPtr
      .asFunction<void Function(ncnn_paramdict_t, int, ncnn_mat_t)>();

  void ncnn_paramdict_set_float(
    ncnn_paramdict_t pd,
    int id,
    double f,
  ) {
    return _ncnn_paramdict_set_float(
      pd,
      id,
      f,
    );
  }

  late final _ncnn_paramdict_set_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ncnn_paramdict_t, ffi.Int,
              ffi.Float)>>('ncnn_paramdict_set_float');
  late final _ncnn_paramdict_set_float = _ncnn_paramdict_set_floatPtr
      .asFunction<void Function(ncnn_paramdict_t, int, double)>();

  void ncnn_paramdict_set_int(
    ncnn_paramdict_t pd,
    int id,
    int i,
  ) {
    return _ncnn_paramdict_set_int(
      pd,
      id,
      i,
    );
  }

  late final _ncnn_paramdict_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ncnn_paramdict_t, ffi.Int, ffi.Int)>>('ncnn_paramdict_set_int');
  late final _ncnn_paramdict_set_int = _ncnn_paramdict_set_intPtr
      .asFunction<void Function(ncnn_paramdict_t, int, int)>();

  ffi.Pointer<ffi.Char> ncnn_version() {
    return _ncnn_version();
  }

  late final _ncnn_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ncnn_version');
  late final _ncnn_version =
      _ncnn_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final NcnnNative _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_allocator_t)>>
      get ncnn_allocator_destroy => _library._ncnn_allocator_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_datareader_t)>>
      get ncnn_datareader_destroy => _library._ncnn_datareader_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_extractor_t)>>
      get ncnn_extractor_destroy => _library._ncnn_extractor_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_layer_t)>>
      get ncnn_layer_destroy => _library._ncnn_layer_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_mat_t)>>
      get ncnn_mat_destroy => _library._ncnn_mat_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_modelbin_t)>>
      get ncnn_modelbin_destroy => _library._ncnn_modelbin_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_net_t)>>
      get ncnn_net_destroy => _library._ncnn_net_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_option_t)>>
      get ncnn_option_destroy => _library._ncnn_option_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ncnn_paramdict_t)>>
      get ncnn_paramdict_destroy => _library._ncnn_paramdict_destroyPtr;
}

typedef FILE = _iobuf;

const int NCNN_BORDER_CONSTANT = 0;

const int NCNN_BORDER_REFLECT = 2;

const int NCNN_BORDER_REPLICATE = 1;

const int NCNN_BORDER_TRANSPARENT = -233;

const int NCNN_MAT_PIXEL_BGR = 2;

const int NCNN_MAT_PIXEL_BGRA = 5;

const int NCNN_MAT_PIXEL_GRAY = 3;

const int NCNN_MAT_PIXEL_RGB = 1;

const int NCNN_MAT_PIXEL_RGBA = 4;

final class __ncnn_allocator_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pthis;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ncnn_allocator_t allocator, ffi.Size size)>> fast_malloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ncnn_allocator_t allocator, ffi.Pointer<ffi.Void> ptr)>>
      fast_free;
}

final class __ncnn_blob_t extends ffi.Opaque {}

final class __ncnn_datareader_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pthis;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_datareader_t dr, ffi.Pointer<ffi.Char> format,
              ffi.Pointer<ffi.Void> p)>> scan;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ncnn_datareader_t dr, ffi.Pointer<ffi.Void> buf,
              ffi.Size size)>> read;
}

final class __ncnn_extractor_t extends ffi.Opaque {}

final class __ncnn_layer_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pthis;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ncnn_layer_t layer, ncnn_paramdict_t pd)>>
      load_param;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_layer_t layer, ncnn_modelbin_t mb)>> load_model;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ncnn_layer_t layer, ncnn_option_t opt)>>
      create_pipeline;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ncnn_layer_t layer, ncnn_option_t opt)>>
      destroy_pipeline;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_layer_t layer, ncnn_mat_t bottom_blob,
              ffi.Pointer<ncnn_mat_t> top_blob, ncnn_option_t opt)>> forward_1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ncnn_layer_t layer,
              ffi.Pointer<ncnn_mat_t> bottom_blobs,
              ffi.Int n,
              ffi.Pointer<ncnn_mat_t> top_blobs,
              ffi.Int n2,
              ncnn_option_t opt)>> forward_n;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ncnn_layer_t layer, ncnn_mat_t bottom_top_blob,
              ncnn_option_t opt)>> forward_inplace_1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ncnn_layer_t layer,
              ffi.Pointer<ncnn_mat_t> bottom_top_blobs,
              ffi.Int n,
              ncnn_option_t opt)>> forward_inplace_n;
}

final class __ncnn_mat_t extends ffi.Opaque {}

final class __ncnn_modelbin_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pthis;

  external ffi.Pointer<
          ffi.NativeFunction<
              ncnn_mat_t Function(ncnn_modelbin_t mb, ffi.Int w, ffi.Int type)>>
      load_1d;

  external ffi.Pointer<
      ffi.NativeFunction<
          ncnn_mat_t Function(
              ncnn_modelbin_t mb, ffi.Int w, ffi.Int h, ffi.Int type)>> load_2d;

  external ffi.Pointer<
      ffi.NativeFunction<
          ncnn_mat_t Function(ncnn_modelbin_t mb, ffi.Int w, ffi.Int h,
              ffi.Int c, ffi.Int type)>> load_3d;
}

final class __ncnn_net_custom_layer_factory_t extends ffi.Struct {
  external ncnn_layer_creator_t creator;

  external ncnn_layer_destroyer_t destroyer;

  external ffi.Pointer<ffi.Void> userdata;

  external ncnn_net_custom_layer_factory_t next;
}

final class __ncnn_net_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pthis;

  external ncnn_net_custom_layer_factory_t custom_layer_factory;
}

final class __ncnn_option_t extends ffi.Opaque {}

final class __ncnn_paramdict_t extends ffi.Opaque {}

final class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

/// allocator api
typedef ncnn_allocator_t = ffi.Pointer<__ncnn_allocator_t>;

/// blob api
typedef ncnn_blob_t = ffi.Pointer<__ncnn_blob_t>;

/// datareader api
typedef ncnn_datareader_t = ffi.Pointer<__ncnn_datareader_t>;

/// extractor api
typedef ncnn_extractor_t = ffi.Pointer<__ncnn_extractor_t>;

/// layer factory function
typedef ncnn_layer_creator_t
    = ffi.Pointer<ffi.NativeFunction<ncnn_layer_creator_tFunction>>;
typedef ncnn_layer_creator_tFunction = ncnn_layer_t Function(
    ffi.Pointer<ffi.Void> userdata);
typedef ncnn_layer_destroyer_t
    = ffi.Pointer<ffi.NativeFunction<ncnn_layer_destroyer_tFunction>>;
typedef ncnn_layer_destroyer_tFunction = ffi.Void Function(
    ncnn_layer_t layer, ffi.Pointer<ffi.Void> userdata);
typedef Dartncnn_layer_destroyer_tFunction = void Function(
    ncnn_layer_t layer, ffi.Pointer<ffi.Void> userdata);

/// layer api
typedef ncnn_layer_t = ffi.Pointer<__ncnn_layer_t>;

/// mat api
typedef ncnn_mat_t = ffi.Pointer<__ncnn_mat_t>;

/// modelbin api
typedef ncnn_modelbin_t = ffi.Pointer<__ncnn_modelbin_t>;
typedef ncnn_net_custom_layer_factory_t
    = ffi.Pointer<__ncnn_net_custom_layer_factory_t>;

/// net api
typedef ncnn_net_t = ffi.Pointer<__ncnn_net_t>;

/// option api
typedef ncnn_option_t = ffi.Pointer<__ncnn_option_t>;

/// paramdict api
typedef ncnn_paramdict_t = ffi.Pointer<__ncnn_paramdict_t>;
